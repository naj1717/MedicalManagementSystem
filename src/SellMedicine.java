
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import common.OpenPdf;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import mns.ConnectionProvider;
import mns.MedicalUtils;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author mulan
 */
public class SellMedicine extends javax.swing.JFrame {
    
    public String numberPattern = "^[0-9]*$";
    private int finalTotalPrice = 0;
    private String billId = "";
    private String userName = "";
    public String mobileNumberPattern = "^[0-9]*$";

    


    /**
     * Creates new form SellMedicine
     */
    public SellMedicine() {
        initComponents();
        
    }
    
    public SellMedicine(String tempUsername) {
        initComponents();
        userName = tempUsername;
        setLocationRelativeTo(null);
    }
    public void SellMedicine(String medicine_name, int quantity, double price, String supplier) {
    try {
        Connection con = ConnectionProvider.getCon();
        PreparedStatement ps = con.prepareStatement("INSERT INTO sales (medicine_name, quantity, price, total_cost, supplier, sale_date) VALUES (?, ?, ?, ?, ?, ?)");

        ps.setString(1, medicine_name);
        ps.setInt(2, quantity);
        ps.setDouble(3, price);
        ps.setDouble(4, quantity * price); // Calculate total cost
        ps.setString(5, supplier);
        ps.setDate(6, new java.sql.Date(System.currentTimeMillis()));

        int rowsInserted = ps.executeUpdate();
        if (rowsInserted > 0) {
            System.out.println("Sale recorded: " + medicine_name + " (" + quantity + ")");
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
    }
}

    
    private void medicineName(String nameOrUniqueId)
    {
        DefaultTableModel model = (DefaultTableModel) medicinesTable.getModel();
        model.setRowCount(0);
        try
        {
            Connection con =ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select *from medicine where name like '"+nameOrUniqueId+"%' or uniqueId like '"+nameOrUniqueId+"%'");
            while(rs.next())
            {
                model.addRow(new Object[]{rs.getString("uniqueId")+"- "+rs.getString("name")});
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);

        }
    }
    
    private void clearMedicineFields()
    {
        
        txtUniqueId.setText("");
        txtName.setText("");
        txtCompanyName.setText("");
        txtPricePerUnit.setText("");
        txtNoOfUnits.setText("");
        txtTotalPrice.setText("");
        
    }
    
    public String getUniqueId(String prefix)
    {
        return prefix + System.nanoTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        medicinesTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtUniqueId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCompanyName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtPricePerUnit = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtNoOfUnits = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtTotalPrice = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        lblFinalTotalPrice = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        txtpname = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtMobno = new javax.swing.JTextField();
        txtdr = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Sell Medicine");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(578, 6, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 56, 1366, 10));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Search");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 99, -1, -1));

        txtSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        getContentPane().add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 132, 300, -1));

        medicinesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicines"
            }
        ));
        medicinesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                medicinesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(medicinesTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 183, 300, 585));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Medicine ID");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 230, -1, -1));

        txtUniqueId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(txtUniqueId, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 250, 300, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Name");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 290, 37, -1));

        txtName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 310, 300, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Company Name");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 360, -1, -1));

        txtCompanyName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(txtCompanyName, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 380, 300, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Price Per Unit");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 160, -1, -1));

        txtPricePerUnit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        getContentPane().add(txtPricePerUnit, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 180, 300, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("No. of Units");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 230, -1, -1));

        txtNoOfUnits.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtNoOfUnits.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNoOfUnitsKeyReleased(evt);
            }
        });
        getContentPane().add(txtNoOfUnits, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 250, 300, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Total Price");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 290, -1, -1));

        txtTotalPrice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtTotalPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalPriceActionPerformed(evt);
            }
        });
        getContentPane().add(txtTotalPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 310, 300, -1));

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine ID", "Name", "Company Name", "Price Per Unit", "No. of Units", "Total Price"
            }
        ));
        cartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(cartTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 430, 738, 264));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add to cart.png"))); // NOI18N
        jButton2.setText("Add To Cart");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 370, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("RS:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 720, -1, -1));

        lblFinalTotalPrice.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblFinalTotalPrice.setForeground(new java.awt.Color(255, 255, 255));
        lblFinalTotalPrice.setText("00");
        getContentPane().add(lblFinalTotalPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 720, -1, -1));

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/generate bill & print.png"))); // NOI18N
        jButton3.setText("Purchase & Print");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 720, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Patient Name");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 90, -1, -1));
        getContentPane().add(txtpname, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 110, 300, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Patient Mobile Number");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 160, -1, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText(" Ref Doctor ");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 90, -1, -1));
        getContentPane().add(txtMobno, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 180, 300, -1));
        getContentPane().add(txtdr, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 110, 300, -1));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/adminDashboardBackground.png"))); // NOI18N
        jLabel13.setText("jLabel13");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtTotalPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalPriceActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String noOfUnits = txtNoOfUnits.getText();
        String uniqueId = txtUniqueId.getText();
        
        String patientName = txtpname.getText();
        String mobNumber = txtMobno.getText();
        String doctorName = txtdr.getText();
                
        if (patientName.isEmpty() || mobNumber.isEmpty() || doctorName.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please fill all details!", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Stop execution if fields are empty
        }
        try{
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            int index = medicinesTable.getSelectedRow();
            TableModel model=medicinesTable.getModel();
            String nuniqueId = model.getValueAt(index, 0).toString();
            String[] splitId = nuniqueId.split("-",2);
            ResultSet rs = st.executeQuery("select * from patient where uniqueId='"+ splitId[0]+"'");
            if(rs.next())
            {
                txtpname.setText(rs.getString("patientName"));
                txtMobno.setText(rs.getString("mobNumber"));
                txtdr.setText(rs.getString("doctorName"));

            }
            
        }
        catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);

            }
            
        
        if(!noOfUnits.equals("") && !uniqueId.equals(""))
        {
            String name = txtName.getText();
            String companyName = txtCompanyName.getText();
            String pricePerUnit = txtPricePerUnit.getText();
            String totalPrice = txtTotalPrice.getText();
            int checkStock =0;
            int checkMedicineAlreadyExistInCart = 0;
            
            try
            {
                Connection con =ConnectionProvider.getCon();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("select *from medicine where uniqueId='"+uniqueId+"'");
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                
                LocalDate today = LocalDate.now();
                while(rs.next())
                {
                    String expdate = rs.getString("edate");
                    LocalDate exdate = LocalDate.parse(expdate, formatter);
                    if(exdate.isBefore(today))
                    {
                        //model.addRow(new Object[]{rs.getString("medicine_pk"),rs.getString("uniqueId"),rs.getString("name"),rs.getString("companyName"),rs.getString("mdate"),rs.getString("edate"),rs.getString("quantity"),rs.getString("price"),expdate});
                        JOptionPane.showMessageDialog(null, "Warning : The medicine " + rs.getString("name")+" has expired and cannot be sold . ");
                        return;
                    }
                    if(rs.getInt("quantity") >=Integer.parseInt(noOfUnits))
                    {
                        checkStock =1;
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Medicine is out of stock,Only "+rs.getInt("quantity")+" Left");
                    }
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);

            }
            
            if(checkStock == 1)
            {
                DefaultTableModel dtm = (DefaultTableModel) cartTable.getModel();
                if(cartTable.getRowCount() !=0)
                {
                    for(int i=0;i <cartTable.getRowCount();i++)
                    {
                        if(Integer.parseInt(dtm.getValueAt(i, 0).toString()) == Integer.parseInt(uniqueId))
                        {
                            checkMedicineAlreadyExistInCart=1;
                            JOptionPane.showMessageDialog(null, "Medicine already exist in cart");
                        }
                    }
                }
                if(checkMedicineAlreadyExistInCart ==0)
                {
                    dtm.addRow(new Object[]{uniqueId,name,companyName,pricePerUnit,noOfUnits,totalPrice});
                    finalTotalPrice = finalTotalPrice + Integer.parseInt(totalPrice);
                    lblFinalTotalPrice.setText(String.valueOf(finalTotalPrice));
                    JOptionPane.showMessageDialog(null, "Added Successfully");
                }
                clearMedicineFields();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No. of units and Medicine ID is required.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        medicineName("");
        txtUniqueId.setEditable(false);
        txtName.setEditable(false);
        txtCompanyName.setEditable(false);
        txtPricePerUnit.setEditable(false);
        txtTotalPrice.setEditable(false);
    }//GEN-LAST:event_formComponentShown

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        String search = txtSearch.getText();
        medicineName(search);
    }//GEN-LAST:event_txtSearchKeyReleased

    private void medicinesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_medicinesTableMouseClicked
        // TODO add your handling code here:
        int index = medicinesTable.getSelectedRow();
        TableModel model = medicinesTable.getModel();
        String nameOrUniqueId = model.getValueAt(index, 0).toString();
        String patientName = txtpname.getText();
        String mobNumber = txtMobno.getText();
        String doctorName = txtdr.getText();
                
        String uniqueId[] = nameOrUniqueId.split("-", 0);
        try
        {
            Connection con =ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select *from medicine where uniqueId='"+uniqueId[0]+"'");
            while(rs.next())
            {
                txtpname.setText(patientName);
                txtMobno.setText(mobNumber);
                txtdr.setText(doctorName);
                txtUniqueId.setText(uniqueId[0]);
                txtName.setText(rs.getString("name"));
                txtCompanyName.setText(rs.getString("companyName"));
                txtPricePerUnit.setText(rs.getString("price"));
                txtNoOfUnits.setText("");
                txtTotalPrice.setText("");
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);

        }
    }//GEN-LAST:event_medicinesTableMouseClicked

    private void txtNoOfUnitsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNoOfUnitsKeyReleased
        // TODO add your handling code here:
        String noOfUnits = txtNoOfUnits.getText();
        if(!noOfUnits.equals(""))
        {
            String price = txtPricePerUnit.getText();
            if(!noOfUnits.matches(numberPattern))
            {
                JOptionPane.showMessageDialog(null, "Number of Units field is Invalid");
            }
            int totalPrice = Integer.parseInt(noOfUnits) * Integer.parseInt(price);
            txtTotalPrice.setText(String.valueOf(totalPrice));
        }
    }//GEN-LAST:event_txtNoOfUnitsKeyReleased

    private void cartTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartTableMouseClicked
        // TODO add your handling code here:
        int index = cartTable.getSelectedRow();
        int a = JOptionPane.showConfirmDialog(null, "Do you want to remove this Medicine","Select",JOptionPane.YES_NO_OPTION);
        if(a==0)
        {
            TableModel model = cartTable.getModel();
            String total = model.getValueAt(index, 5).toString();
            finalTotalPrice = finalTotalPrice - Integer.parseInt(total);
            lblFinalTotalPrice.setText(String.valueOf(finalTotalPrice));
            ((DefaultTableModel) cartTable.getModel()).removeRow(index);
        }
    }//GEN-LAST:event_cartTableMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        /*int selectedRow = cartTable.getSelectedRow();
        
         TableModel model = cartTable.getModel();
         String medicine_name =model.getValueAt(selectedRow, 0).toString();
         int quantity = Integer.parseInt(model.getValueAt(selectedRow,1).toString());
         double price = Double.parseDouble(model.getValueAt(selectedRow, 2).toString());
         String supplier = model.getValueAt(selectedRow, 4).toString();
         SellMedicine(medicine_name, quantity, price, supplier);
         System.out.println("sold");*/
         
        //Date sale_date = "";
        /*java.util.Date today=new java.util.Date();
        java.sql.Date sqlDate = new java.sql.Date(today.getTime());
        //Connection con = null;
        PreparedStatement pst = null;
        try
        {
            Connection con = ConnectionProvider.getCon();
            if(con==null)
            {
                System.out.println("db connection failed");
                return;
            }
            String query = "insert into sales(medicine_name, quantity,price,total_cost, supplier, sale_date) values(?,?,?,?,?,?)";
            pst =con.prepareStatement(query);
            pst.setString(1, medicine_name);
            pst.setInt(2, quantity);
            pst.setDouble(3, price);
            pst.setDouble(4, total_cost);
            pst.setString(5, supplier);
            pst.setDate(6, sqlDate);
            System.out.println("SQL Query: " + pst.toString());
            
            int rowInserted = pst.executeUpdate();
            if(rowInserted>0)
            {
                System.out.println("data inserted successfully");
            }
            else{
                System.out.println("failed");
            }

        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
                        
        }*/
        
        String patientName = txtpname.getText();
        String mobNumber = txtMobno.getText();
        String doctorName = txtdr.getText();
        if(finalTotalPrice != 0)
        {
            
            
            billId =getUniqueId("Bill-");
            
            DefaultTableModel dtm = (DefaultTableModel) cartTable.getModel();
            if(cartTable.getRowCount() != 0)
            {
                for(int i=0;i < cartTable.getRowCount();i++)
                {
                    try
                    {
                        Connection con =ConnectionProvider.getCon();
                        Statement st = con.createStatement();
                        st.executeUpdate("update medicine set quantity=quantity-"+Integer.parseInt(dtm.getValueAt(i, 4).toString()) + " where uniqueId="+Integer.parseInt(dtm.getValueAt(i, 0).toString()));
                    }
                    catch(Exception e)
                    {
                        JOptionPane.showMessageDialog(null, e);
                        
                    }
                }
            }
            try
            {
                
                SimpleDateFormat myformat = new SimpleDateFormat("dd-MM-yyyy");
                Calendar cal = Calendar.getInstance();
                Connection con =ConnectionProvider.getCon();
                PreparedStatement ps = con.prepareStatement("insert into bill(billId,patientName, mobNumber, doctorName,billDate,totalPaid,generatedBy) values(?,?,?,?,?,?,?)");
                ps.setString(1, billId);
                ps.setString(2, patientName);
                ps.setString(3, mobNumber);
                ps.setString(4,doctorName);
                ps.setString(5, myformat.format(cal.getTime()));
                ps.setInt(6, finalTotalPrice);
                ps.setString(7, userName);
                ps.executeUpdate();
                
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);   
            }
            
            //create bill
            com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
            try
            {
                PdfWriter.getInstance(doc, new FileOutputStream(MedicalUtils.billPath+""+billId+".pdf"));
                doc.open();
                com.itextpdf.text.Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
                com.itextpdf.text.Font normalFont = FontFactory.getFont(FontFactory.HELVETICA, 12);

                Paragraph medicalName = new Paragraph("Medical Management System\n",titleFont);
                medicalName.setAlignment(Paragraph.ALIGN_CENTER);
                
                
                if(txtpname==null || txtMobno == null )
                {
                    System.out.println("error");
                }
                doc.add(medicalName);
                Paragraph starLine = new Paragraph("****************************************************************************************************************");
                doc.add(starLine);
                Paragraph details = new Paragraph("\tPatient Name: " + patientName +"\nMobile Number: " + mobNumber +"\nDoctor Name: " + doctorName+" \nBill ID: "+billId+"\nDate: "+ new Date()+"\nTotal Paid: "+finalTotalPrice,titleFont);
                doc.add(details);
                doc.add(starLine);
                 
                PdfPTable tb1 = new PdfPTable(6);
                tb1.setWidthPercentage(100);
                tb1.getDefaultCell().setBorderWidth(1);
                tb1.addCell("Medicine ID");
                tb1.addCell("Name");
                tb1.addCell("Company Name");
                tb1.addCell("Price Per Unit");
                tb1.addCell("No. Of Units");
                tb1.addCell("Sub Total Price");
                
                for(int i=0;i<cartTable.getRowCount();i++)
                {
                    String a = cartTable.getValueAt(i, 0).toString();
                    String b = cartTable.getValueAt(i, 1).toString();
                    String c = cartTable.getValueAt(i, 2).toString();
                    String d = cartTable.getValueAt(i, 3).toString();
                    String e = cartTable.getValueAt(i, 4).toString();
                    String f = cartTable.getValueAt(i, 5).toString();
                    tb1.addCell(a);
                    tb1.addCell(b);
                    tb1.addCell(c);
                    tb1.addCell(d);
                    tb1.addCell(e);
                    tb1.addCell(f);
                }
                doc.add(tb1);
                doc.add(starLine);
                Paragraph thanksMsg = new Paragraph("Thank You, Please Visit Again.");
                doc.add(thanksMsg);
                //open pdf
                OpenPdf.openById(String.valueOf(billId));
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);

            }
            doc.close();
            setVisible(false);
            new SellMedicine(userName).setVisible(true);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please add some medicine to cart");
        }
        try {
            
            TableModel model = cartTable.getModel();
            int rowCount = model.getRowCount();

            if (rowCount == 0) {
                JOptionPane.showMessageDialog(null, "Cart is empty. Add medicines to sell.");
                return;
            }

            for (int i = 0; i < rowCount; i++) {
                String medicine_name = model.getValueAt(i, 1).toString();  // Assuming 1 = Medicine Name
                String quantityStr = model.getValueAt(i, 4).toString();    // Assuming 4 = Quantity
                String priceStr = model.getValueAt(i, 3).toString();       // Assuming 3 = Price
                String supplier = model.getValueAt(i, 2).toString();       // Assuming 2 = Supplier

                if (quantityStr.matches("\\d+") && priceStr.matches("\\d+(\\.\\d+)?")) {
                int quantity = Integer.parseInt(quantityStr);
                double price = Double.parseDouble(priceStr);

                SellMedicine(medicine_name, quantity, price, supplier);  // Sell each medicine
                }
                else {
                    JOptionPane.showMessageDialog(null, "Invalid quantity or price at row: " + (i + 1));
                }
            }

            JOptionPane.showMessageDialog(null, "All medicines in the cart have been sold successfully!");

                /*TableModel model = cartTable.getModel();
                int selectedRow = cartTable.getSelectedRow();
   
                if (selectedRow == -1) {  
                    JOptionPane.showMessageDialog(null, "Please select a medicine to sell.");
                    return; // Stop execution if no row is selected
                }

                // Proceed only if a valid row is selected
                String medicine_name = model.getValueAt(selectedRow, 1).toString();
                String quantityStr = model.getValueAt(selectedRow, 4).toString();
                String priceStr = model.getValueAt(selectedRow, 3).toString();
                String supplier = model.getValueAt(selectedRow, 2).toString();
                
                if (quantityStr.matches("\\d+") || priceStr.matches("\\d+(\\.\\d+)?")) {
                    int quantity = Integer.parseInt(quantityStr);
                    double price = Double.parseDouble(priceStr);
                    SellMedicine(medicine_name, quantity, price, supplier);
                }

// Convert to numbers safely
                
                // Call the method to process selling
                

                // Remove the item from cart after selling
                ((DefaultTableModel) cartTable.getModel()).removeRow(selectedRow);

                System.out.println("Sold: " + medicine_name);

                */
    
                //if (selectedRow >= 0) {
                //    String medicine_name = model.getValueAt(selectedRow, 0).toString();
                //    int quantity = Integer.parseInt(model.getValueAt(selectedRow, 1).toString());
                //    double price = Double.parseDouble(model.getValueAt(selectedRow, 2).toString());
                 //   String supplier = model.getValueAt(selectedRow, 4).toString();

                // Call the modified SellMedicine method
                    
                

            } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            }

    }//GEN-LAST:event_jButton3ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SellMedicine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SellMedicine().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable cartTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblFinalTotalPrice;
    private javax.swing.JTable medicinesTable;
    private javax.swing.JTextField txtCompanyName;
    private javax.swing.JTextField txtMobno;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNoOfUnits;
    private javax.swing.JTextField txtPricePerUnit;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTotalPrice;
    private javax.swing.JTextField txtUniqueId;
    private javax.swing.JTextField txtdr;
    private javax.swing.JTextField txtpname;
    // End of variables declaration//GEN-END:variables
}
